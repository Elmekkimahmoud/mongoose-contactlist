{"version":3,"sources":["contactlist.js","contactAdd.js","contactUpdate.js","App.js","serviceWorker.js","index.js"],"names":["ContactList","props","delete1","id","axios","delete","then","res","console","log","data","setState","contacts","state","filter","el","_id","get","PrevProps","PrevState","length","this","className","map","key","Name","Phone","Email","onClick","to","Component","ContactAdd","setName","e","target","value","setTel","setEmail","addcontact","name","alert","post","type","onChange","Updatecontact","handleChange","UpdateContact","modifiedContact","put","match","params","placeholder","App","exact","path","component","contactUpd","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9ace7ec7.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios'\r\nimport {Link } from 'react-router-dom'\r\nclass ContactList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            contacts:[]\r\n         }\r\n    }\r\n\r\n\r\ncomponentDidMount(){\r\n    console.log(\"Compnenet DID MOUNT\")\r\n    axios.get(\"http://localhost:4000/find_notes/\")\r\n    .then(res => {this.setState({contacts:res.data})\r\n      console.log(this.state.contacts)\r\n})\r\n}\r\ncomponentDidUpdate (PrevProps,PrevState) {\r\n    if(PrevState.contacts.length !==this.state.contacts.length) {\r\n     console.log(\"UPDATED\")\r\n     axios.get(\"http://localhost:4000/find_notes/\")\r\n    }\r\n}\r\ndelete1=(id)=>{\r\n    axios.delete(\"http://localhost:4000/delete_note/\"+id)\r\n    .then(res =>{\r\n        console.log(res.data);\r\n        this.setState({\r\n            contacts: this.state.contacts.filter(el=>el._id!==id)\r\n        })\r\n    })\r\n   \r\n}\r\n    render() { \r\n        console.log(this.state.contacts)\r\n        console.log(\"Render\")\r\n        return ( \r\n            <div className='contact-list'>\r\n                {this.state.contacts&&this.state.contacts.map((el) =>{\r\n                    return(\r\n                        <div className=\"contact-info\" key={el._id}>\r\n                            <p><span>Name:  </span>  <span>{el.Name}</span></p>\r\n                            <p><span>Phone:  </span>  <span>{el.Phone}</span></p>\r\n                            <p><span>Email:  </span>  <span>{el.Email}</span></p>\r\n                            <p>\r\n                            <button onClick={()=>{this.delete1(el._id)}}>Supprimer</button>\r\n                               \r\n                               <Link to={`/update/${el._id}`}> <button>Edit</button></Link>\r\n                            </p>\r\n                        </div>\r\n                    )\r\n                } )}\r\n             </div>\r\n            \r\n         );\r\n    }\r\n}\r\n \r\nexport default ContactList;","import React, { Component } from 'react';\r\nimport axios from 'axios'\r\n \r\nclass ContactAdd extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state=({\r\n      Name:'',\r\n      Phone:'',\r\n      Email:'',\r\n    })\r\n  }\r\n  setName=e=> {\r\n    this.setState({\r\n    Name:e.target.value\r\n  })}\r\n  setTel=e=> {  this.setState({\r\n    Phone:e.target.value\r\n  })}\r\n  setEmail=e=> {  this.setState({\r\n    Email:e.target.value\r\n  })}\r\n  addcontact = () => {\r\n    if (this.state.name !== '' && (this.state.Phone !== '' || this.state.Email !== '')) {\r\n    axios.post(\"http://localhost:4000/add_note\",{\r\n     Name:this.state.Name, Phone:this.state.Phone,Email:this.state.Email\r\n    })\r\n  }\r\nelse { alert('Required fields!! Name or tel or email') }\r\n}\r\n       render() {\r\n        return (\r\n           <form >\r\n        <h2>\r\n          ADD contact Page\r\n        </h2>\r\n        <br/>\r\n        <br/>\r\n        <span className=\"subtitle\">NAME:</span>\r\n        <br/>\r\n        <input type=\"text\" onChange={this.setName}  />\r\n        <br/>\r\n        <span className=\"subtitle\">Tel:</span>\r\n        <br/>\r\n        <input type=\"text\" onChange={this.setTel}  />\r\n        <br/>\r\n        <br/>\r\n        <span className=\"subtitle\">EMAIL:</span>\r\n        <br/>\r\n        <input type=\"email\" onChange={this.setEmail}  />\r\n        <br/>\r\n        <br/>\r\n        <br/>\r\n   <button onClick={this.addcontact} >Submit</button> \r\n     </form>\r\n      );\r\n    }\r\n}\r\nexport default ContactAdd","import React, { Component } from 'react'\r\nimport axios from 'axios';\r\n\r\nexport default class Updatecontact extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            Name:'',\r\n            Phone:'',\r\n            Email:''\r\n         }\r\n    }\r\n    handleChange=(e)=>{\r\n        this.setState({\r\n            [e.target.name]:e.target.value\r\n        })\r\n    }\r\n    componentDidMount() {\r\n\r\n    axios.get( 'http://localhost:4000/find_note/'+this.props.match.params.id)\r\n    .then(res => this.setState({Name:res.data.Name,Phone:res.data.Phone,Email:res.data.Email}))\r\n    }\r\n \r\n    UpdateContact=()=>{\r\n        let modifiedContact ={\r\n            Name:this.state.Name,\r\n            Phone:this.state.Phone,\r\n            Email:this.state.Email\r\n        }\r\n        axios.put('http://localhost:4000/update_note/'+this.props.match.params.id,modifiedContact)\r\n    }\r\n    render() {\r\n        return (\r\n            <div className='editcont' >\r\n                <input Name=\"Name\" placeholder=\"Name\" type=\"text\" value={this.state.Name} onChange={(e) =>this.handleChange(e)} /><br/>\r\n                <input name=\"Phone\" placeholder=\"Phone\" type=\"text\" value={this.state.Phone} onChange={(e) =>this.handleChange(e)}/><br/>\r\n                <input name=\"Email\" placeholder=\"Email\" type=\"text\" value={this.state.Email} onChange={(e) =>this.handleChange(e)}/>\r\n            <button onClick={this.UpdateContact}>modifier</button>\r\n            \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route,Link } from 'react-router-dom';\nimport ContactList from './contactlist';\nimport ContactAdd from './contactAdd'\nimport contactUpd from './contactUpdate'\n\nfunction App() {\n  return (\n    <Router>\n    <div className=\"App\">\n      <h1>Contact App</h1>\n      \n      \n      <Link to={`/contacts`}><button>Contact List</button></Link>\n      <Link to={`/add`}><button>Add</button></Link>\n      \n  \n      <div className=\"add-contact\">\n  \n        <Route exact path='/contacts' component={ContactList}/>\n        <Route exact path='/add' component={ContactAdd}/>\n  \n        <Route exact path='/update/:id' component={contactUpd}/>\n\n      </div>\n    </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}